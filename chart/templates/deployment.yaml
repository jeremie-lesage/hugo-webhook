apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hugo-webhook.fullname" . }}
  labels:
    {{- include "hugo-webhook.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "hugo-webhook.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "hugo-webhook.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "hugo-webhook.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- if and (not (empty .Values.git.sshPrivateKey)) (empty .Values.git.existingSshPrivateKeySecret) }}
        - name: webhook-ssh-auth
          secret:
            secretName: webhook-ssh-auth
            defaultMode: 256              # = mode 0400
      {{end}}
      {{- if not (empty .Values.git.existingSshPrivateKeySecret)  }}
        - name: webhook-ssh-auth
          secret:
            secretName: {{ .Values.git.existingSshPrivateKeySecret }}
            defaultMode: 256              # = mode 0400
      {{end}}
      {{- if and (not (empty .Values.git.gitCredentials)) (empty .Values.git.existingGitCredentials) }}
        - name: git-credentials
          secret:
            secretName: git-credentials
      {{ end }}
      {{- if not (empty .Values.git.existingGitCredentials)  }}
        - name: git-credentials
          secret:
            secretName: {{ .Values.git.existingGitCredentials }}
      {{end}}
        - name: html
          emptyDir: { }
        - name: hooks-config
          configMap:
            name: hooks-config
      initContainers:
        - name: "{{ .Chart.Name }}-init"
          image: "{{ .Values.image.hookRepository }}:{{ .Values.image.hookRepositoryVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/var/scripts/refresh.py" ]
          env:
            - name: GIT_PROVIDER
              value: "{{ .Values.git.provider }}"
            - name: GIT_TRANSPORT
              value: "{{ .Values.git.transport }}"
            - name: GIT_REPO_BRANCH
              value: "{{ .Values.git.repoBranch }}"
            - name: GIT_REPO_URL
              value: "{{ .Values.git.repoUrl }}"
            - name: GIT_REPO_CONTENT_PATH
              value: "{{ .Values.git.repoContentPath }}"
            - name: GIT_CLONE_DEST
              value: "{{ .Values.git.cloneDest }}"
            - name: GIT_PRESERVE_SRC
              value: "{{ .Values.git.preserveSrc }}"
            - name: TARGET_DIR
              value: "{{  .Values.target.baseDir }}{{  .Values.target.baseUrl }}"
            - name: TARGET_BASE_URL
              value: "{{ .Values.target.baseUrl }}"
            - name: TARGET_SERVER_URI
              value: "{{ .Values.target.serverUri }}"
            - name: BUILD_PARAMS
              value: "{{  .Values.target.params }}"
            - name: PROJECT_TYPE
              value: "{{ .Values.git.projectType }}"
            - name: GIT_MANY_BRANCHES
              value: "{{ .Values.git.manyBranches }}"
          volumeMounts:
            - name: html
              mountPath: "{{ .Values.ephemeral.mountTo}}"
            {{- if or (not (empty .Values.git.sshPrivateKey)) (not (empty .Values.git.existingSshPrivateKeySecret)) }}
            - name: webhook-ssh-auth
              mountPath: /ssh
            {{ end }}
            {{- if or (not (empty .Values.git.gitCredentials)) (not (empty .Values.git.existingGitCredentials)) }}
            - name: git-credentials
              readOnly: true
              mountPath: /home/app/.git-credentials
              subPath: git-credentials
            {{ end }}
      containers:
        - name: "{{ .Chart.Name }}-web"
          volumeMounts:
            - name: html
              mountPath: /usr/share/nginx/html
              subPath: static
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.nginxRepository }}:{{ .Values.image.nginxVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              {{- if (eq .Values.git.manyBranches "TRUE") }}
              path: "{{ .Values.target.baseUrl }}/{{ .Values.git.repoBranch }}"
              {{- else }}
              path: {{ .Values.target.baseUrl }}
              {{ end }}
              port: http
          readinessProbe:
            httpGet:
              {{- if (eq .Values.git.manyBranches "TRUE") }}
              path: "{{ .Values.target.baseUrl }}/{{ .Values.git.repoBranch }}"
              {{- else }}
              path: {{ .Values.target.baseUrl }}
              {{ end }}
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: "{{ .Chart.Name }}-hook"
          image: "{{ .Values.image.hookRepository }}:{{ .Values.image.hookRepositoryVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/home/app/go/bin/webhook"
          args:
            - "-verbose"
            - "-urlprefix"
            - "{{ .Values.hooks.urlPrefix }}"
            - "-hooks"
            - "{{ .Values.hooks.configFile }}"
          env:
            - name: GIT_PROVIDER
              value: "{{ .Values.git.provider }}"
            - name: GIT_TRANSPORT
              value: "{{ .Values.git.transport }}"
            - name: GIT_REPO_BRANCH
              value: "{{ .Values.git.repoBranch }}"
            - name: GIT_REPO_URL
              value: "{{ .Values.git.repoUrl }}"
            - name: GIT_REPO_CONTENT_PATH
              value: "{{ .Values.git.repoContentPath }}"
            - name: GIT_CLONE_DEST
              value: "{{ .Values.git.cloneDest }}"
            - name: GIT_PRESERVE_SRC
              value: "{{ .Values.git.preserveSrc }}"
            - name: TARGET_DIR
              value: "{{ .Values.target.baseDir }}{{ .Values.target.baseUrl }}"
            - name: TARGET_BASE_URL
              value: "{{ .Values.target.baseUrl }}"
            - name: BUILD_PARAMS
              value: "{{ .Values.target.params }}"
            - name: PROJECT_TYPE
              value: "{{ .Values.git.projectType }}"
          ports:
            - containerPort: 9000
          volumeMounts:
            - name: hooks-config
              mountPath: /etc/webhook
            - name: html
              mountPath: "{{ .Values.ephemeral.mountTo}}"
            {{- if or (not (empty .Values.git.sshPrivateKey)) (not (empty .Values.git.existingSshPrivateKeySecret)) }}
            - name: webhook-ssh-auth
              mountPath: /ssh
            {{ end }}
            {{- if or (not (empty .Values.git.gitCredentials)) (not (empty .Values.git.existingGitCredentials)) }}
            - name: git-credentials
              readOnly: true
              mountPath: /home/app/git-credentials
              subPath: git-credentials
            {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
